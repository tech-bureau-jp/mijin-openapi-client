# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from mijin_openapi_client.models.order import Order
from mijin_openapi_client.models.receipt_type_enum import ReceiptTypeEnum
from mijin_openapi_client.models.resolution_statement_page import ResolutionStatementPage
from mijin_openapi_client.models.transaction_statement_page import TransactionStatementPage

from mijin_openapi_client.api_client import ApiClient, RequestSerialized
from mijin_openapi_client.api_response import ApiResponse
from mijin_openapi_client.rest import RESTResponseType


class ReceiptRoutesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_address_resolution_statements(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResolutionStatementPage:
        """Get receipts address resolution statements

        Gets an array of address resolution statements.

        :param height: Filter by block height.
        :type height: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_address_resolution_statements_serialize(
            height=height,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolutionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_address_resolution_statements_with_http_info(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResolutionStatementPage]:
        """Get receipts address resolution statements

        Gets an array of address resolution statements.

        :param height: Filter by block height.
        :type height: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_address_resolution_statements_serialize(
            height=height,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolutionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_address_resolution_statements_without_preload_content(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get receipts address resolution statements

        Gets an array of address resolution statements.

        :param height: Filter by block height.
        :type height: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_address_resolution_statements_serialize(
            height=height,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolutionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_address_resolution_statements_serialize(
        self,
        height,
        page_size,
        page_number,
        offset,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if height is not None:
            
            _query_params.append(('height', height))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if order is not None:
            
            _query_params.append(('order', order.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/statements/resolutions/address',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_mosaic_resolution_statements(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResolutionStatementPage:
        """Get receipts mosaic resolution statements

        Gets an array of mosaic resolution statements.

        :param height: Filter by block height.
        :type height: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_mosaic_resolution_statements_serialize(
            height=height,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolutionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_mosaic_resolution_statements_with_http_info(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResolutionStatementPage]:
        """Get receipts mosaic resolution statements

        Gets an array of mosaic resolution statements.

        :param height: Filter by block height.
        :type height: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_mosaic_resolution_statements_serialize(
            height=height,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolutionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_mosaic_resolution_statements_without_preload_content(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get receipts mosaic resolution statements

        Gets an array of mosaic resolution statements.

        :param height: Filter by block height.
        :type height: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_mosaic_resolution_statements_serialize(
            height=height,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolutionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_mosaic_resolution_statements_serialize(
        self,
        height,
        page_size,
        page_number,
        offset,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if height is not None:
            
            _query_params.append(('height', height))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if order is not None:
            
            _query_params.append(('order', order.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/statements/resolutions/mosaic',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_receipts(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        from_height: Annotated[Optional[StrictStr], Field(description="Only blocks with height greater or equal than this one are returned.")] = None,
        to_height: Annotated[Optional[StrictStr], Field(description="Only blocks with height smaller or equal than this one are returned.")] = None,
        receipt_type: Annotated[Optional[List[ReceiptTypeEnum]], Field(description="Filter by receipt type. To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``. ")] = None,
        recipient_address: Annotated[Optional[StrictStr], Field(description="Filter by address of the account receiving the transaction.")] = None,
        sender_address: Annotated[Optional[StrictStr], Field(description="Filter by address sending mosaics.")] = None,
        target_address: Annotated[Optional[StrictStr], Field(description="Filter by target address.")] = None,
        artifact_id: Annotated[Optional[StrictStr], Field(description="Mosaic or namespace identifier")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransactionStatementPage:
        """Search transaction statements

        Gets an array of transaction statements.

        :param height: Filter by block height.
        :type height: str
        :param from_height: Only blocks with height greater or equal than this one are returned.
        :type from_height: str
        :param to_height: Only blocks with height smaller or equal than this one are returned.
        :type to_height: str
        :param receipt_type: Filter by receipt type. To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``. 
        :type receipt_type: List[ReceiptTypeEnum]
        :param recipient_address: Filter by address of the account receiving the transaction.
        :type recipient_address: str
        :param sender_address: Filter by address sending mosaics.
        :type sender_address: str
        :param target_address: Filter by target address.
        :type target_address: str
        :param artifact_id: Mosaic or namespace identifier
        :type artifact_id: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_receipts_serialize(
            height=height,
            from_height=from_height,
            to_height=to_height,
            receipt_type=receipt_type,
            recipient_address=recipient_address,
            sender_address=sender_address,
            target_address=target_address,
            artifact_id=artifact_id,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_receipts_with_http_info(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        from_height: Annotated[Optional[StrictStr], Field(description="Only blocks with height greater or equal than this one are returned.")] = None,
        to_height: Annotated[Optional[StrictStr], Field(description="Only blocks with height smaller or equal than this one are returned.")] = None,
        receipt_type: Annotated[Optional[List[ReceiptTypeEnum]], Field(description="Filter by receipt type. To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``. ")] = None,
        recipient_address: Annotated[Optional[StrictStr], Field(description="Filter by address of the account receiving the transaction.")] = None,
        sender_address: Annotated[Optional[StrictStr], Field(description="Filter by address sending mosaics.")] = None,
        target_address: Annotated[Optional[StrictStr], Field(description="Filter by target address.")] = None,
        artifact_id: Annotated[Optional[StrictStr], Field(description="Mosaic or namespace identifier")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransactionStatementPage]:
        """Search transaction statements

        Gets an array of transaction statements.

        :param height: Filter by block height.
        :type height: str
        :param from_height: Only blocks with height greater or equal than this one are returned.
        :type from_height: str
        :param to_height: Only blocks with height smaller or equal than this one are returned.
        :type to_height: str
        :param receipt_type: Filter by receipt type. To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``. 
        :type receipt_type: List[ReceiptTypeEnum]
        :param recipient_address: Filter by address of the account receiving the transaction.
        :type recipient_address: str
        :param sender_address: Filter by address sending mosaics.
        :type sender_address: str
        :param target_address: Filter by target address.
        :type target_address: str
        :param artifact_id: Mosaic or namespace identifier
        :type artifact_id: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_receipts_serialize(
            height=height,
            from_height=from_height,
            to_height=to_height,
            receipt_type=receipt_type,
            recipient_address=recipient_address,
            sender_address=sender_address,
            target_address=target_address,
            artifact_id=artifact_id,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_receipts_without_preload_content(
        self,
        height: Annotated[Optional[StrictStr], Field(description="Filter by block height.")] = None,
        from_height: Annotated[Optional[StrictStr], Field(description="Only blocks with height greater or equal than this one are returned.")] = None,
        to_height: Annotated[Optional[StrictStr], Field(description="Only blocks with height smaller or equal than this one are returned.")] = None,
        receipt_type: Annotated[Optional[List[ReceiptTypeEnum]], Field(description="Filter by receipt type. To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``. ")] = None,
        recipient_address: Annotated[Optional[StrictStr], Field(description="Filter by address of the account receiving the transaction.")] = None,
        sender_address: Annotated[Optional[StrictStr], Field(description="Filter by address sending mosaics.")] = None,
        target_address: Annotated[Optional[StrictStr], Field(description="Filter by target address.")] = None,
        artifact_id: Annotated[Optional[StrictStr], Field(description="Mosaic or namespace identifier")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="Select the number of entries to return.")] = None,
        page_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Filter by page number.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. ")] = None,
        order: Annotated[Optional[Order], Field(description="Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search transaction statements

        Gets an array of transaction statements.

        :param height: Filter by block height.
        :type height: str
        :param from_height: Only blocks with height greater or equal than this one are returned.
        :type from_height: str
        :param to_height: Only blocks with height smaller or equal than this one are returned.
        :type to_height: str
        :param receipt_type: Filter by receipt type. To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``. 
        :type receipt_type: List[ReceiptTypeEnum]
        :param recipient_address: Filter by address of the account receiving the transaction.
        :type recipient_address: str
        :param sender_address: Filter by address sending mosaics.
        :type sender_address: str
        :param target_address: Filter by target address.
        :type target_address: str
        :param artifact_id: Mosaic or namespace identifier
        :type artifact_id: str
        :param page_size: Select the number of entries to return.
        :type page_size: int
        :param page_number: Filter by page number.
        :type page_number: int
        :param offset: Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
        :type offset: str
        :param order: Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``. If the request does not specify ``orderBy``, REST returns the collection ordered by id. 
        :type order: Order
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_receipts_serialize(
            height=height,
            from_height=from_height,
            to_height=to_height,
            receipt_type=receipt_type,
            recipient_address=recipient_address,
            sender_address=sender_address,
            target_address=target_address,
            artifact_id=artifact_id,
            page_size=page_size,
            page_number=page_number,
            offset=offset,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionStatementPage",
            '404': "ModelError",
            '409': "ModelError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_receipts_serialize(
        self,
        height,
        from_height,
        to_height,
        receipt_type,
        recipient_address,
        sender_address,
        target_address,
        artifact_id,
        page_size,
        page_number,
        offset,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'receiptType': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if height is not None:
            
            _query_params.append(('height', height))
            
        if from_height is not None:
            
            _query_params.append(('fromHeight', from_height))
            
        if to_height is not None:
            
            _query_params.append(('toHeight', to_height))
            
        if receipt_type is not None:
            
            _query_params.append(('receiptType', receipt_type))
            
        if recipient_address is not None:
            
            _query_params.append(('recipientAddress', recipient_address))
            
        if sender_address is not None:
            
            _query_params.append(('senderAddress', sender_address))
            
        if target_address is not None:
            
            _query_params.append(('targetAddress', target_address))
            
        if artifact_id is not None:
            
            _query_params.append(('artifactId', artifact_id))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if order is not None:
            
            _query_params.append(('order', order.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/statements/transaction',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


