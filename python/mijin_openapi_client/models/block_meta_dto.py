# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class BlockMetaDTO(BaseModel):
    """
    BlockMetaDTO
    """ # noqa: E501
    hash: StrictStr
    total_fee: StrictStr = Field(description="Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).", alias="totalFee")
    generation_hash: StrictStr = Field(alias="generationHash")
    state_hash_sub_cache_merkle_roots: List[StrictStr] = Field(alias="stateHashSubCacheMerkleRoots")
    total_transactions_count: StrictInt = Field(description="Total number of [transactions](https://docs.symbol.dev/concepts/transaction.html) confirmed in this block, including *embedded* transactions (i.e. transactions contained within aggregate transactions). ", alias="totalTransactionsCount")
    transactions_count: StrictInt = Field(description="Number of [transactions](https://docs.symbol.dev/concepts/transaction.html) confirmed in this block. This does not count *embedded* transactions (i.e. transactions contained within aggregate transactions). ", alias="transactionsCount")
    statements_count: StrictInt = Field(description="Number of statements (of any kind) present in this block. Bear in mind that some of them (like [resolution statements](https://docs.symbol.dev/concepts/receipt.html#resolution-statement)) are triggered by transactions present in the block, but in general, [transaction statements](https://docs.symbol.dev/concepts/receipt.html#transaction-statement) are not. ", alias="statementsCount")
    __properties: ClassVar[List[str]] = ["hash", "totalFee", "generationHash", "stateHashSubCacheMerkleRoots", "totalTransactionsCount", "transactionsCount", "statementsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlockMetaDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlockMetaDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hash": obj.get("hash"),
            "totalFee": obj.get("totalFee"),
            "generationHash": obj.get("generationHash"),
            "stateHashSubCacheMerkleRoots": obj.get("stateHashSubCacheMerkleRoots"),
            "totalTransactionsCount": obj.get("totalTransactionsCount"),
            "transactionsCount": obj.get("transactionsCount"),
            "statementsCount": obj.get("statementsCount")
        })
        return _obj


