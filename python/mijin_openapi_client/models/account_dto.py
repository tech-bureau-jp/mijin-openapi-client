# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from mijin_openapi_client.models.account_type_enum import AccountTypeEnum
from mijin_openapi_client.models.activity_bucket_dto import ActivityBucketDTO
from mijin_openapi_client.models.mosaic import Mosaic
from mijin_openapi_client.models.supplemental_public_keys_dto import SupplementalPublicKeysDTO
from typing import Optional, Set
from typing_extensions import Self

class AccountDTO(BaseModel):
    """
    AccountDTO
    """ # noqa: E501
    version: StrictInt = Field(description="The version of the state")
    address: StrictStr = Field(description="Address encoded using a 32-character set.")
    address_height: StrictStr = Field(description="Height of the blockchain.", alias="addressHeight")
    public_key: StrictStr = Field(description="Public key.", alias="publicKey")
    public_key_height: StrictStr = Field(description="Height of the blockchain.", alias="publicKeyHeight")
    account_type: AccountTypeEnum = Field(alias="accountType")
    supplemental_public_keys: SupplementalPublicKeysDTO = Field(alias="supplementalPublicKeys")
    activity_buckets: List[ActivityBucketDTO] = Field(alias="activityBuckets")
    mosaics: List[Mosaic] = Field(description="Mosaic units owned.")
    importance: StrictStr = Field(description="Probability of an account to harvest the next block.")
    importance_height: StrictStr = Field(description="Height of the blockchain.", alias="importanceHeight")
    __properties: ClassVar[List[str]] = ["version", "address", "addressHeight", "publicKey", "publicKeyHeight", "accountType", "supplementalPublicKeys", "activityBuckets", "mosaics", "importance", "importanceHeight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of supplemental_public_keys
        if self.supplemental_public_keys:
            _dict['supplementalPublicKeys'] = self.supplemental_public_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in activity_buckets (list)
        _items = []
        if self.activity_buckets:
            for _item_activity_buckets in self.activity_buckets:
                if _item_activity_buckets:
                    _items.append(_item_activity_buckets.to_dict())
            _dict['activityBuckets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mosaics (list)
        _items = []
        if self.mosaics:
            for _item_mosaics in self.mosaics:
                if _item_mosaics:
                    _items.append(_item_mosaics.to_dict())
            _dict['mosaics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "address": obj.get("address"),
            "addressHeight": obj.get("addressHeight"),
            "publicKey": obj.get("publicKey"),
            "publicKeyHeight": obj.get("publicKeyHeight"),
            "accountType": obj.get("accountType"),
            "supplementalPublicKeys": SupplementalPublicKeysDTO.from_dict(obj["supplementalPublicKeys"]) if obj.get("supplementalPublicKeys") is not None else None,
            "activityBuckets": [ActivityBucketDTO.from_dict(_item) for _item in obj["activityBuckets"]] if obj.get("activityBuckets") is not None else None,
            "mosaics": [Mosaic.from_dict(_item) for _item in obj["mosaics"]] if obj.get("mosaics") is not None else None,
            "importance": obj.get("importance"),
            "importanceHeight": obj.get("importanceHeight")
        })
        return _obj


