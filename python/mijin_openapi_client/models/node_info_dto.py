# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NodeInfoDTO(BaseModel):
    """
    NodeInfoDTO
    """ # noqa: E501
    version: StrictInt = Field(description="Version of the application.")
    public_key: StrictStr = Field(description="Public key.", alias="publicKey")
    network_generation_hash_seed: StrictStr = Field(alias="networkGenerationHashSeed")
    roles: StrictInt = Field(description="A number that defines the different roles the node provides. Possible roles are: * 1 - Peer node. * 2 - Api node. * 4 - Voting node. * 64 - IPv4 compatible node * 128 - IPv6 compatible node.  The values are bitwise added together, Examples: 1 = Just Peer. 2 = Just Api. 3 = Peer and Api node. 7 = Peer, Api and Voting node. 65 = IPv4 and Peer node. ")
    port: StrictInt = Field(description="Port used for the communication.")
    network_identifier: StrictInt = Field(alias="networkIdentifier")
    friendly_name: StrictStr = Field(description="Node friendly name.", alias="friendlyName")
    host: StrictStr = Field(description="Node IP address.")
    node_public_key: Optional[StrictStr] = Field(default=None, description="Public key.", alias="nodePublicKey")
    __properties: ClassVar[List[str]] = ["version", "publicKey", "networkGenerationHashSeed", "roles", "port", "networkIdentifier", "friendlyName", "host", "nodePublicKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "publicKey": obj.get("publicKey"),
            "networkGenerationHashSeed": obj.get("networkGenerationHashSeed"),
            "roles": obj.get("roles"),
            "port": obj.get("port"),
            "networkIdentifier": obj.get("networkIdentifier"),
            "friendlyName": obj.get("friendlyName"),
            "host": obj.get("host"),
            "nodePublicKey": obj.get("nodePublicKey")
        })
        return _obj


