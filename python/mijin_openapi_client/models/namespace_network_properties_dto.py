# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NamespaceNetworkPropertiesDTO(BaseModel):
    """
    NamespaceNetworkPropertiesDTO
    """ # noqa: E501
    max_name_size: Optional[StrictStr] = Field(default=None, description="Maximum namespace name size.", alias="maxNameSize")
    max_child_namespaces: Optional[StrictStr] = Field(default=None, description="Maximum number of children for a root namespace.", alias="maxChildNamespaces")
    max_namespace_depth: Optional[StrictStr] = Field(default=None, description="Maximum namespace depth.", alias="maxNamespaceDepth")
    min_namespace_duration: Optional[StrictStr] = Field(default=None, description="Minimum namespace duration.", alias="minNamespaceDuration")
    max_namespace_duration: Optional[StrictStr] = Field(default=None, description="Maximum namespace duration.", alias="maxNamespaceDuration")
    namespace_grace_period_duration: Optional[StrictStr] = Field(default=None, description="Grace period during which time only the previous owner can renew an expired namespace.", alias="namespaceGracePeriodDuration")
    reserved_root_namespace_names: Optional[StrictStr] = Field(default=None, description="Reserved root namespaces that cannot be claimed.", alias="reservedRootNamespaceNames")
    namespace_rental_fee_sink_address: Optional[StrictStr] = Field(default=None, description="Address encoded using a 32-character set.", alias="namespaceRentalFeeSinkAddress")
    root_namespace_rental_fee_per_block: Optional[StrictStr] = Field(default=None, description="Root namespace rental fee per block.", alias="rootNamespaceRentalFeePerBlock")
    child_namespace_rental_fee: Optional[StrictStr] = Field(default=None, description="Child namespace rental fee.", alias="childNamespaceRentalFee")
    __properties: ClassVar[List[str]] = ["maxNameSize", "maxChildNamespaces", "maxNamespaceDepth", "minNamespaceDuration", "maxNamespaceDuration", "namespaceGracePeriodDuration", "reservedRootNamespaceNames", "namespaceRentalFeeSinkAddress", "rootNamespaceRentalFeePerBlock", "childNamespaceRentalFee"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NamespaceNetworkPropertiesDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NamespaceNetworkPropertiesDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxNameSize": obj.get("maxNameSize"),
            "maxChildNamespaces": obj.get("maxChildNamespaces"),
            "maxNamespaceDepth": obj.get("maxNamespaceDepth"),
            "minNamespaceDuration": obj.get("minNamespaceDuration"),
            "maxNamespaceDuration": obj.get("maxNamespaceDuration"),
            "namespaceGracePeriodDuration": obj.get("namespaceGracePeriodDuration"),
            "reservedRootNamespaceNames": obj.get("reservedRootNamespaceNames"),
            "namespaceRentalFeeSinkAddress": obj.get("namespaceRentalFeeSinkAddress"),
            "rootNamespaceRentalFeePerBlock": obj.get("rootNamespaceRentalFeePerBlock"),
            "childNamespaceRentalFee": obj.get("childNamespaceRentalFee")
        })
        return _obj


