# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from mijin_openapi_client.models.embedded_account_address_restriction_transaction_dto import EmbeddedAccountAddressRestrictionTransactionDTO
from mijin_openapi_client.models.embedded_account_key_link_transaction_dto import EmbeddedAccountKeyLinkTransactionDTO
from mijin_openapi_client.models.embedded_account_metadata_transaction_dto import EmbeddedAccountMetadataTransactionDTO
from mijin_openapi_client.models.embedded_account_mosaic_restriction_transaction_dto import EmbeddedAccountMosaicRestrictionTransactionDTO
from mijin_openapi_client.models.embedded_account_operation_restriction_transaction_dto import EmbeddedAccountOperationRestrictionTransactionDTO
from mijin_openapi_client.models.embedded_address_alias_transaction_dto import EmbeddedAddressAliasTransactionDTO
from mijin_openapi_client.models.embedded_hash_lock_transaction_dto import EmbeddedHashLockTransactionDTO
from mijin_openapi_client.models.embedded_mosaic_address_restriction_transaction_dto import EmbeddedMosaicAddressRestrictionTransactionDTO
from mijin_openapi_client.models.embedded_mosaic_alias_transaction_dto import EmbeddedMosaicAliasTransactionDTO
from mijin_openapi_client.models.embedded_mosaic_definition_transaction_dto import EmbeddedMosaicDefinitionTransactionDTO
from mijin_openapi_client.models.embedded_mosaic_global_restriction_transaction_dto import EmbeddedMosaicGlobalRestrictionTransactionDTO
from mijin_openapi_client.models.embedded_mosaic_metadata_transaction_dto import EmbeddedMosaicMetadataTransactionDTO
from mijin_openapi_client.models.embedded_mosaic_supply_change_transaction_dto import EmbeddedMosaicSupplyChangeTransactionDTO
from mijin_openapi_client.models.embedded_mosaic_supply_revocation_transaction_dto import EmbeddedMosaicSupplyRevocationTransactionDTO
from mijin_openapi_client.models.embedded_multisig_account_modification_transaction_dto import EmbeddedMultisigAccountModificationTransactionDTO
from mijin_openapi_client.models.embedded_namespace_metadata_transaction_dto import EmbeddedNamespaceMetadataTransactionDTO
from mijin_openapi_client.models.embedded_namespace_registration_transaction_dto import EmbeddedNamespaceRegistrationTransactionDTO
from mijin_openapi_client.models.embedded_node_key_link_transaction_dto import EmbeddedNodeKeyLinkTransactionDTO
from mijin_openapi_client.models.embedded_secret_lock_transaction_dto import EmbeddedSecretLockTransactionDTO
from mijin_openapi_client.models.embedded_secret_proof_transaction_dto import EmbeddedSecretProofTransactionDTO
from mijin_openapi_client.models.embedded_transfer_transaction_dto import EmbeddedTransferTransactionDTO
from mijin_openapi_client.models.embedded_voting_key_link_transaction_dto import EmbeddedVotingKeyLinkTransactionDTO
from mijin_openapi_client.models.embedded_vrf_key_link_transaction_dto import EmbeddedVrfKeyLinkTransactionDTO
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

EMBEDDEDTRANSACTIONINFODTOTRANSACTION_ANY_OF_SCHEMAS = ["EmbeddedAccountAddressRestrictionTransactionDTO", "EmbeddedAccountKeyLinkTransactionDTO", "EmbeddedAccountMetadataTransactionDTO", "EmbeddedAccountMosaicRestrictionTransactionDTO", "EmbeddedAccountOperationRestrictionTransactionDTO", "EmbeddedAddressAliasTransactionDTO", "EmbeddedHashLockTransactionDTO", "EmbeddedMosaicAddressRestrictionTransactionDTO", "EmbeddedMosaicAliasTransactionDTO", "EmbeddedMosaicDefinitionTransactionDTO", "EmbeddedMosaicGlobalRestrictionTransactionDTO", "EmbeddedMosaicMetadataTransactionDTO", "EmbeddedMosaicSupplyChangeTransactionDTO", "EmbeddedMosaicSupplyRevocationTransactionDTO", "EmbeddedMultisigAccountModificationTransactionDTO", "EmbeddedNamespaceMetadataTransactionDTO", "EmbeddedNamespaceRegistrationTransactionDTO", "EmbeddedNodeKeyLinkTransactionDTO", "EmbeddedSecretLockTransactionDTO", "EmbeddedSecretProofTransactionDTO", "EmbeddedTransferTransactionDTO", "EmbeddedVotingKeyLinkTransactionDTO", "EmbeddedVrfKeyLinkTransactionDTO"]

class EmbeddedTransactionInfoDTOTransaction(BaseModel):
    """
    EmbeddedTransactionInfoDTOTransaction
    """

    # data type: EmbeddedAccountKeyLinkTransactionDTO
    anyof_schema_1_validator: Optional[EmbeddedAccountKeyLinkTransactionDTO] = None
    # data type: EmbeddedNodeKeyLinkTransactionDTO
    anyof_schema_2_validator: Optional[EmbeddedNodeKeyLinkTransactionDTO] = None
    # data type: EmbeddedVrfKeyLinkTransactionDTO
    anyof_schema_3_validator: Optional[EmbeddedVrfKeyLinkTransactionDTO] = None
    # data type: EmbeddedVotingKeyLinkTransactionDTO
    anyof_schema_4_validator: Optional[EmbeddedVotingKeyLinkTransactionDTO] = None
    # data type: EmbeddedHashLockTransactionDTO
    anyof_schema_5_validator: Optional[EmbeddedHashLockTransactionDTO] = None
    # data type: EmbeddedSecretLockTransactionDTO
    anyof_schema_6_validator: Optional[EmbeddedSecretLockTransactionDTO] = None
    # data type: EmbeddedSecretProofTransactionDTO
    anyof_schema_7_validator: Optional[EmbeddedSecretProofTransactionDTO] = None
    # data type: EmbeddedAccountMetadataTransactionDTO
    anyof_schema_8_validator: Optional[EmbeddedAccountMetadataTransactionDTO] = None
    # data type: EmbeddedMosaicMetadataTransactionDTO
    anyof_schema_9_validator: Optional[EmbeddedMosaicMetadataTransactionDTO] = None
    # data type: EmbeddedNamespaceMetadataTransactionDTO
    anyof_schema_10_validator: Optional[EmbeddedNamespaceMetadataTransactionDTO] = None
    # data type: EmbeddedMosaicDefinitionTransactionDTO
    anyof_schema_11_validator: Optional[EmbeddedMosaicDefinitionTransactionDTO] = None
    # data type: EmbeddedMosaicSupplyChangeTransactionDTO
    anyof_schema_12_validator: Optional[EmbeddedMosaicSupplyChangeTransactionDTO] = None
    # data type: EmbeddedMosaicSupplyRevocationTransactionDTO
    anyof_schema_13_validator: Optional[EmbeddedMosaicSupplyRevocationTransactionDTO] = None
    # data type: EmbeddedNamespaceRegistrationTransactionDTO
    anyof_schema_14_validator: Optional[EmbeddedNamespaceRegistrationTransactionDTO] = None
    # data type: EmbeddedAddressAliasTransactionDTO
    anyof_schema_15_validator: Optional[EmbeddedAddressAliasTransactionDTO] = None
    # data type: EmbeddedMosaicAliasTransactionDTO
    anyof_schema_16_validator: Optional[EmbeddedMosaicAliasTransactionDTO] = None
    # data type: EmbeddedMultisigAccountModificationTransactionDTO
    anyof_schema_17_validator: Optional[EmbeddedMultisigAccountModificationTransactionDTO] = None
    # data type: EmbeddedAccountAddressRestrictionTransactionDTO
    anyof_schema_18_validator: Optional[EmbeddedAccountAddressRestrictionTransactionDTO] = None
    # data type: EmbeddedAccountMosaicRestrictionTransactionDTO
    anyof_schema_19_validator: Optional[EmbeddedAccountMosaicRestrictionTransactionDTO] = None
    # data type: EmbeddedAccountOperationRestrictionTransactionDTO
    anyof_schema_20_validator: Optional[EmbeddedAccountOperationRestrictionTransactionDTO] = None
    # data type: EmbeddedMosaicGlobalRestrictionTransactionDTO
    anyof_schema_21_validator: Optional[EmbeddedMosaicGlobalRestrictionTransactionDTO] = None
    # data type: EmbeddedMosaicAddressRestrictionTransactionDTO
    anyof_schema_22_validator: Optional[EmbeddedMosaicAddressRestrictionTransactionDTO] = None
    # data type: EmbeddedTransferTransactionDTO
    anyof_schema_23_validator: Optional[EmbeddedTransferTransactionDTO] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "EmbeddedAccountAddressRestrictionTransactionDTO", "EmbeddedAccountKeyLinkTransactionDTO", "EmbeddedAccountMetadataTransactionDTO", "EmbeddedAccountMosaicRestrictionTransactionDTO", "EmbeddedAccountOperationRestrictionTransactionDTO", "EmbeddedAddressAliasTransactionDTO", "EmbeddedHashLockTransactionDTO", "EmbeddedMosaicAddressRestrictionTransactionDTO", "EmbeddedMosaicAliasTransactionDTO", "EmbeddedMosaicDefinitionTransactionDTO", "EmbeddedMosaicGlobalRestrictionTransactionDTO", "EmbeddedMosaicMetadataTransactionDTO", "EmbeddedMosaicSupplyChangeTransactionDTO", "EmbeddedMosaicSupplyRevocationTransactionDTO", "EmbeddedMultisigAccountModificationTransactionDTO", "EmbeddedNamespaceMetadataTransactionDTO", "EmbeddedNamespaceRegistrationTransactionDTO", "EmbeddedNodeKeyLinkTransactionDTO", "EmbeddedSecretLockTransactionDTO", "EmbeddedSecretProofTransactionDTO", "EmbeddedTransferTransactionDTO", "EmbeddedVotingKeyLinkTransactionDTO", "EmbeddedVrfKeyLinkTransactionDTO" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = EmbeddedTransactionInfoDTOTransaction.model_construct()
        error_messages = []
        # validate data type: EmbeddedAccountKeyLinkTransactionDTO
        if not isinstance(v, EmbeddedAccountKeyLinkTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedAccountKeyLinkTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedNodeKeyLinkTransactionDTO
        if not isinstance(v, EmbeddedNodeKeyLinkTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedNodeKeyLinkTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedVrfKeyLinkTransactionDTO
        if not isinstance(v, EmbeddedVrfKeyLinkTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedVrfKeyLinkTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedVotingKeyLinkTransactionDTO
        if not isinstance(v, EmbeddedVotingKeyLinkTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedVotingKeyLinkTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedHashLockTransactionDTO
        if not isinstance(v, EmbeddedHashLockTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedHashLockTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedSecretLockTransactionDTO
        if not isinstance(v, EmbeddedSecretLockTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedSecretLockTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedSecretProofTransactionDTO
        if not isinstance(v, EmbeddedSecretProofTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedSecretProofTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedAccountMetadataTransactionDTO
        if not isinstance(v, EmbeddedAccountMetadataTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedAccountMetadataTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedMosaicMetadataTransactionDTO
        if not isinstance(v, EmbeddedMosaicMetadataTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedMosaicMetadataTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedNamespaceMetadataTransactionDTO
        if not isinstance(v, EmbeddedNamespaceMetadataTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedNamespaceMetadataTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedMosaicDefinitionTransactionDTO
        if not isinstance(v, EmbeddedMosaicDefinitionTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedMosaicDefinitionTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedMosaicSupplyChangeTransactionDTO
        if not isinstance(v, EmbeddedMosaicSupplyChangeTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedMosaicSupplyChangeTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedMosaicSupplyRevocationTransactionDTO
        if not isinstance(v, EmbeddedMosaicSupplyRevocationTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedMosaicSupplyRevocationTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedNamespaceRegistrationTransactionDTO
        if not isinstance(v, EmbeddedNamespaceRegistrationTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedNamespaceRegistrationTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedAddressAliasTransactionDTO
        if not isinstance(v, EmbeddedAddressAliasTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedAddressAliasTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedMosaicAliasTransactionDTO
        if not isinstance(v, EmbeddedMosaicAliasTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedMosaicAliasTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedMultisigAccountModificationTransactionDTO
        if not isinstance(v, EmbeddedMultisigAccountModificationTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedMultisigAccountModificationTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedAccountAddressRestrictionTransactionDTO
        if not isinstance(v, EmbeddedAccountAddressRestrictionTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedAccountAddressRestrictionTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedAccountMosaicRestrictionTransactionDTO
        if not isinstance(v, EmbeddedAccountMosaicRestrictionTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedAccountMosaicRestrictionTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedAccountOperationRestrictionTransactionDTO
        if not isinstance(v, EmbeddedAccountOperationRestrictionTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedAccountOperationRestrictionTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedMosaicGlobalRestrictionTransactionDTO
        if not isinstance(v, EmbeddedMosaicGlobalRestrictionTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedMosaicGlobalRestrictionTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedMosaicAddressRestrictionTransactionDTO
        if not isinstance(v, EmbeddedMosaicAddressRestrictionTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedMosaicAddressRestrictionTransactionDTO`")
        else:
            return v

        # validate data type: EmbeddedTransferTransactionDTO
        if not isinstance(v, EmbeddedTransferTransactionDTO):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmbeddedTransferTransactionDTO`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in EmbeddedTransactionInfoDTOTransaction with anyOf schemas: EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[EmbeddedAccountKeyLinkTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedAccountKeyLinkTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[EmbeddedNodeKeyLinkTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedNodeKeyLinkTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[EmbeddedVrfKeyLinkTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedVrfKeyLinkTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[EmbeddedVotingKeyLinkTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedVotingKeyLinkTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[EmbeddedHashLockTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedHashLockTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[EmbeddedSecretLockTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedSecretLockTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[EmbeddedSecretProofTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedSecretProofTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[EmbeddedAccountMetadataTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedAccountMetadataTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[EmbeddedMosaicMetadataTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedMosaicMetadataTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[EmbeddedNamespaceMetadataTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedNamespaceMetadataTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[EmbeddedMosaicDefinitionTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedMosaicDefinitionTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[EmbeddedMosaicSupplyChangeTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedMosaicSupplyChangeTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[EmbeddedMosaicSupplyRevocationTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedMosaicSupplyRevocationTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[EmbeddedNamespaceRegistrationTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedNamespaceRegistrationTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[EmbeddedAddressAliasTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedAddressAliasTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[EmbeddedMosaicAliasTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedMosaicAliasTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[EmbeddedMultisigAccountModificationTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedMultisigAccountModificationTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[EmbeddedAccountAddressRestrictionTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedAccountAddressRestrictionTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[EmbeddedAccountMosaicRestrictionTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedAccountMosaicRestrictionTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[EmbeddedAccountOperationRestrictionTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedAccountOperationRestrictionTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[EmbeddedMosaicGlobalRestrictionTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedMosaicGlobalRestrictionTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[EmbeddedMosaicAddressRestrictionTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedMosaicAddressRestrictionTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[EmbeddedTransferTransactionDTO] = None
        try:
            instance.actual_instance = EmbeddedTransferTransactionDTO.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into EmbeddedTransactionInfoDTOTransaction with anyOf schemas: EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


