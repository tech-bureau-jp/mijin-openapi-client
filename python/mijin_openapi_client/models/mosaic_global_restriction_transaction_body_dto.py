# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from mijin_openapi_client.models.mosaic_restriction_type_enum import MosaicRestrictionTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class MosaicGlobalRestrictionTransactionBodyDTO(BaseModel):
    """
    MosaicGlobalRestrictionTransactionBodyDTO
    """ # noqa: E501
    mosaic_id: StrictStr = Field(description="Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real mosaic identifier. ", alias="mosaicId")
    reference_mosaic_id: StrictStr = Field(description="Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real mosaic identifier. ", alias="referenceMosaicId")
    restriction_key: StrictStr = Field(description="Restriction key.", alias="restrictionKey")
    previous_restriction_value: StrictStr = Field(description="Restriction value.", alias="previousRestrictionValue")
    new_restriction_value: StrictStr = Field(description="Restriction value.", alias="newRestrictionValue")
    previous_restriction_type: MosaicRestrictionTypeEnum = Field(alias="previousRestrictionType")
    new_restriction_type: MosaicRestrictionTypeEnum = Field(alias="newRestrictionType")
    __properties: ClassVar[List[str]] = ["mosaicId", "referenceMosaicId", "restrictionKey", "previousRestrictionValue", "newRestrictionValue", "previousRestrictionType", "newRestrictionType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MosaicGlobalRestrictionTransactionBodyDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MosaicGlobalRestrictionTransactionBodyDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mosaicId": obj.get("mosaicId"),
            "referenceMosaicId": obj.get("referenceMosaicId"),
            "restrictionKey": obj.get("restrictionKey"),
            "previousRestrictionValue": obj.get("previousRestrictionValue"),
            "newRestrictionValue": obj.get("newRestrictionValue"),
            "previousRestrictionType": obj.get("previousRestrictionType"),
            "newRestrictionType": obj.get("newRestrictionType")
        })
        return _obj


