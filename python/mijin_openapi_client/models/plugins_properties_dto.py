# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from mijin_openapi_client.models.account_key_link_network_properties_dto import AccountKeyLinkNetworkPropertiesDTO
from mijin_openapi_client.models.account_restriction_network_properties_dto import AccountRestrictionNetworkPropertiesDTO
from mijin_openapi_client.models.aggregate_network_properties_dto import AggregateNetworkPropertiesDTO
from mijin_openapi_client.models.hash_lock_network_properties_dto import HashLockNetworkPropertiesDTO
from mijin_openapi_client.models.metadata_network_properties_dto import MetadataNetworkPropertiesDTO
from mijin_openapi_client.models.mosaic_network_properties_dto import MosaicNetworkPropertiesDTO
from mijin_openapi_client.models.mosaic_restriction_network_properties_dto import MosaicRestrictionNetworkPropertiesDTO
from mijin_openapi_client.models.multisig_network_properties_dto import MultisigNetworkPropertiesDTO
from mijin_openapi_client.models.namespace_network_properties_dto import NamespaceNetworkPropertiesDTO
from mijin_openapi_client.models.secret_lock_network_properties_dto import SecretLockNetworkPropertiesDTO
from mijin_openapi_client.models.transfer_network_properties_dto import TransferNetworkPropertiesDTO
from typing import Optional, Set
from typing_extensions import Self

class PluginsPropertiesDTO(BaseModel):
    """
    Plugin related configuration properties.
    """ # noqa: E501
    accountlink: Optional[AccountKeyLinkNetworkPropertiesDTO] = None
    aggregate: Optional[AggregateNetworkPropertiesDTO] = None
    lockhash: Optional[HashLockNetworkPropertiesDTO] = None
    locksecret: Optional[SecretLockNetworkPropertiesDTO] = None
    metadata: Optional[MetadataNetworkPropertiesDTO] = None
    mosaic: Optional[MosaicNetworkPropertiesDTO] = None
    multisig: Optional[MultisigNetworkPropertiesDTO] = None
    namespace: Optional[NamespaceNetworkPropertiesDTO] = None
    restrictionaccount: Optional[AccountRestrictionNetworkPropertiesDTO] = None
    restrictionmosaic: Optional[MosaicRestrictionNetworkPropertiesDTO] = None
    transfer: Optional[TransferNetworkPropertiesDTO] = None
    __properties: ClassVar[List[str]] = ["accountlink", "aggregate", "lockhash", "locksecret", "metadata", "mosaic", "multisig", "namespace", "restrictionaccount", "restrictionmosaic", "transfer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PluginsPropertiesDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accountlink
        if self.accountlink:
            _dict['accountlink'] = self.accountlink.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aggregate
        if self.aggregate:
            _dict['aggregate'] = self.aggregate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lockhash
        if self.lockhash:
            _dict['lockhash'] = self.lockhash.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locksecret
        if self.locksecret:
            _dict['locksecret'] = self.locksecret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mosaic
        if self.mosaic:
            _dict['mosaic'] = self.mosaic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multisig
        if self.multisig:
            _dict['multisig'] = self.multisig.to_dict()
        # override the default output from pydantic by calling `to_dict()` of namespace
        if self.namespace:
            _dict['namespace'] = self.namespace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restrictionaccount
        if self.restrictionaccount:
            _dict['restrictionaccount'] = self.restrictionaccount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restrictionmosaic
        if self.restrictionmosaic:
            _dict['restrictionmosaic'] = self.restrictionmosaic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer
        if self.transfer:
            _dict['transfer'] = self.transfer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PluginsPropertiesDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountlink": AccountKeyLinkNetworkPropertiesDTO.from_dict(obj["accountlink"]) if obj.get("accountlink") is not None else None,
            "aggregate": AggregateNetworkPropertiesDTO.from_dict(obj["aggregate"]) if obj.get("aggregate") is not None else None,
            "lockhash": HashLockNetworkPropertiesDTO.from_dict(obj["lockhash"]) if obj.get("lockhash") is not None else None,
            "locksecret": SecretLockNetworkPropertiesDTO.from_dict(obj["locksecret"]) if obj.get("locksecret") is not None else None,
            "metadata": MetadataNetworkPropertiesDTO.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "mosaic": MosaicNetworkPropertiesDTO.from_dict(obj["mosaic"]) if obj.get("mosaic") is not None else None,
            "multisig": MultisigNetworkPropertiesDTO.from_dict(obj["multisig"]) if obj.get("multisig") is not None else None,
            "namespace": NamespaceNetworkPropertiesDTO.from_dict(obj["namespace"]) if obj.get("namespace") is not None else None,
            "restrictionaccount": AccountRestrictionNetworkPropertiesDTO.from_dict(obj["restrictionaccount"]) if obj.get("restrictionaccount") is not None else None,
            "restrictionmosaic": MosaicRestrictionNetworkPropertiesDTO.from_dict(obj["restrictionmosaic"]) if obj.get("restrictionmosaic") is not None else None,
            "transfer": TransferNetworkPropertiesDTO.from_dict(obj["transfer"]) if obj.get("transfer") is not None else None
        })
        return _obj


