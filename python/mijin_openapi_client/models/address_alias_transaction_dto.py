# coding: utf-8

"""
    Catapult REST Endpoints

    OpenAPI Specification of catapult-rest

    The version of the OpenAPI document: 1.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from mijin_openapi_client.models.alias_action_enum import AliasActionEnum
from mijin_openapi_client.models.network_type_enum import NetworkTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class AddressAliasTransactionDTO(BaseModel):
    """
    Transaction to link a namespace to an account.
    """ # noqa: E501
    size: StrictInt = Field(description="A number that allows uint 32 values.")
    signature: StrictStr = Field(description="Entity's signature generated by the signer.")
    signer_public_key: StrictStr = Field(description="Public key.", alias="signerPublicKey")
    version: StrictInt = Field(description="Entity version.")
    network: NetworkTypeEnum
    type: StrictInt
    max_fee: StrictStr = Field(description="Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).", alias="maxFee")
    deadline: StrictStr = Field(description="Duration expressed in number of blocks.")
    namespace_id: StrictStr = Field(description="Namespace identifier.", alias="namespaceId")
    address: StrictStr = Field(description="Address encoded using a 32-character set.")
    alias_action: AliasActionEnum = Field(alias="aliasAction")
    __properties: ClassVar[List[str]] = ["size", "signature", "signerPublicKey", "version", "network", "type", "maxFee", "deadline", "namespaceId", "address", "aliasAction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressAliasTransactionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressAliasTransactionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "size": obj.get("size"),
            "signature": obj.get("signature"),
            "signerPublicKey": obj.get("signerPublicKey"),
            "version": obj.get("version"),
            "network": obj.get("network"),
            "type": obj.get("type"),
            "maxFee": obj.get("maxFee"),
            "deadline": obj.get("deadline"),
            "namespaceId": obj.get("namespaceId"),
            "address": obj.get("address"),
            "aliasAction": obj.get("aliasAction")
        })
        return _obj


